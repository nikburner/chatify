openapi: 3.0.0
info:
  title: Chat Application API
  description: API for user authentication and messaging.
  version: 1.0.0
servers:
  - url: http://localhost:3000
    description: Local development server

paths:
  /auth/register:
    post:
      summary: Register a new user
      description: Creates a new user account with email, username, and password.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user@example.com
                password:
                  type: string
                  example: password123
                username:
                  type: string
                  example: john_doe
              required:
                - email
                - password
                - username
      responses:
        '200':
          description: User successfully registered
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: User already exists

  /auth/login:
    post:
      summary: Login an existing user
      description: Authenticate a user with email and password and return a JWT token.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: user@example.com
                password:
                  type: string
                  example: password123
              required:
                - email
                - password
      responses:
        '200':
          description: Successfully logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: JWT token
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
                  msg:
                    type: string
                    example: Login Successful
        '401':
          description: Invalid credentials

  /auth/users:
    get:
      summary: Get all users except the authenticated user
      description: Retrieves all users except the one making the request. Requires JWT authentication.
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successfully retrieved users
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        '500':
          description: Internal server error

  /messages:
    post:
      summary: Send a message
      description: Send a message from the authenticated user to another user.
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  example: Hello, how are you?
                recipientId:
                  type: integer
                  example: 2
              required:
                - content
                - recipientId
      responses:
        '200':
          description: Message sent successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Message'
        '500':
          description: Failed to send message

  /messages/{otherUserId}:
    get:
      summary: Get messages between authenticated user and another user
      description: Fetches the chat history between the authenticated user and the specified user.
      security:
        - bearerAuth: []
      parameters:
        - name: otherUserId
          in: path
          required: true
          schema:
            type: integer
            example: 2
      responses:
        '200':
          description: Messages retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Message'
        '500':
          description: Failed to retrieve messages

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
          example: 1
        email:
          type: string
          example: user@example.com
        username:
          type: string
          example: john_doe

    Message:
      type: object
      properties:
        id:
          type: integer
          example: 1
        content:
          type: string
          example: Hello, how are you?
        senderId:
          type: integer
          example: 1
        recipientId:
          type: integer
          example: 2
       
